<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>获取B站需要大会员才能看的番剧或视频的字幕</title>
      <link href="/2024/01/31/55851.html"/>
      <url>/2024/01/31/55851.html</url>
      
        <content type="html"><![CDATA[<p>首先找到要看的视频，打开开发者工具(F12)，找到参数带cid的请求，复制下来<br><img src="https://webstatic.apeaaar.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE+2023-12-17+200133.png" alt="示例图片"><br>填入api中<br><a href="https://api.bilibili.com/x/v1/dm/list.so?oid=%E5%A4%8D%E5%88%B6%E5%BE%97%E5%88%B0%E7%9A%84cid">https://api.bilibili.com/x/v1/dm/list.so?oid=复制得到的cid</a><br><img src="https://webstatic.apeaaar.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE+2023-12-17+201817.png" alt="同样是示例"><br>会返回xml格式的数据，保存下来，去<a href="https://tiansh.github.io/us-danmaku/bilibili/">https://tiansh.github.io/us-danmaku/bilibili/</a>解析，得到一个ass文件。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue.3</title>
      <link href="/2023/07/26/43551.html"/>
      <url>/2023/07/26/43551.html</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a>{{  }}</h2><p>插入文本</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> sometext <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><p>如果插入html，内容会被转义，html不会被解析</p><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><p>直接输出html，不会被转义，能够正常解析。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>somehtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>先挖个坑</title>
      <link href="/2023/07/24/19074.html"/>
      <url>/2023/07/24/19074.html</url>
      
        <content type="html"><![CDATA[<p>对的，正文没有东西，只是先挖个坑。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Waline第三方登录</title>
      <link href="/2023/07/23/38391.html"/>
      <url>/2023/07/23/38391.html</url>
      
        <content type="html"><![CDATA[<p>折腾waline的时候发现了第三方登录。<br>这篇文章就弄一个github好了。</p><h2 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h2><p>先部署<a href="https://github.com/walinejs/auth/">项目</a>,README有一个Vercel的部署按钮，点一下就成。部署好了记得换域名，不然国内不太好访问。</p><h2 id="注册应用"><a href="#注册应用" class="headerlink" title="注册应用"></a>注册应用</h2><p>前往<a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a>，填写应用名（Application name），主页链接（Homepage URL）和授权回调地址（Authorization callback URL）。<br>我的应用名写了Apeaaar’s Blog，主页链接写了<a href="https://blog.apeaaar.com/">https://blog.apeaaar.com/</a>，授权回调地址按照<a href="https://github.com/walinejs/auth/">项目</a>的README写<a href="https://auth.apeaaar.com/github">https://auth.apeaaar.com/github</a>。然后点击register application，注册应用。点击Generate a new client secret，之后会跳转，复制密钥和id。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>找到部署的auth服务，在环境变量里，将GITHUB_ID设置为你的应用的id，将GITHUB_SECRET设置为应用的密钥，之后重新部署。<br>找到waline的服务端，将OAUTH_URL设置为部署的auth服务的地址，再重新部署。</p><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><p>到评论区，点击登录，出现了新的窗口，点击Github的图标，出现Authorize XXX，我的是Authorize Apeaaar’s Blog，XXX就是你填的应用名，点击Authorize XXX，XXX就是github账号名，之后会自动跳转 ，窗口会自己关闭，评论的框也显示了github名，表示已经成功通过github登陆了。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>不止github，<a href="https://github.com/walinejs/auth/">项目</a>还有其他的登陆方式。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue.2</title>
      <link href="/2023/07/22/27358.html"/>
      <url>/2023/07/22/27358.html</url>
      
        <content type="html"><![CDATA[<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>实现数据双向绑定。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- number1: 2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> number1 <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span></code></pre><p><code>number1</code>被定义为2，上面的<code>&lt;h1&gt;</code>标签内会显示2，下面的<code>&lt;input&gt;</code>标签内也会显示2。如果在<code>&lt;input&gt;</code>内输入新的内容，<code>number1</code>的值会改变，<code>&lt;h1&gt;</code>的内容也会改变。</p><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p>绑定事件。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- isShow = false    clickbutton &amp;#123;    isShow = !isShow    isShow ? sometext = "按钮打开了！" : sometext = "按钮关闭了！"&amp;#125; --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickbutton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> sometext <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><p>在上面的例子中，如果<code>button</code>被按下，就会触发<code>click</code>事件并执行方法<code>clickbutton</code>。在<code>clickbutton</code>中，会将<code>isShow</code>变为与它相反的真假值，这样就可以进行状态转化。三元操作符按照<code>isShow</code>的真假性执行表达式，如果<code>isShow</code>为真，<code>sometext</code>是“按钮打开了！”反之则是“按钮关闭了！”<br>也可以讲<code>clickbutton</code>的内容写到<code>v-on</code>里。</p><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>继续上一个例子。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- isShow = false    clickbutton &amp;#123;    isShow = !isShow&amp;#125;也可以将下面一行改成&lt;button v-on:click="isShow = !isShow">按钮&lt;/button> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickbutton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>开关<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>开关打开了！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>开关关闭了！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><p>按下<code>&lt;button&gt;</code>，会将<code>isShow</code>转化为与它相反的值。这一次使用<code>v-show</code>，它能按照指定的值的真假性显示元素。如果指定的值为<code>true</code>，<code>v-show</code>就会显示元素。<code>v-show</code>通过设置元素的可见性显示元素，而非删除和添加新的元素。<code>v-show</code>也可以传入表达式，比如上面的<code>!isShow</code>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>建站</title>
      <link href="/2023/07/20/2.html"/>
      <url>/2023/07/20/2.html</url>
      
        <content type="html"><![CDATA[<h2 id="域名购买"><a href="#域名购买" class="headerlink" title="域名购买"></a>域名购买</h2><p>我在namesilo上买的。<br><img src="https://i.ibb.co/6DWcpJb/2023-07-20-202027.png" alt="namesilo"><br>在Find affordable domain name的地方输入域名，然后点击search domain，就可以查看域名的状态了。支持使用支付宝。okoff是一个优惠码。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>android</title>
      <link href="/2023/07/20/24077.html"/>
      <url>/2023/07/20/24077.html</url>
      
        <content type="html"><![CDATA[<p>之前想，现在的密码和其他的信息都是加密保存的，一般人想得到原本的密码（复杂的）难度很大。不过在验证的时候一定会得到与原密码有关联的信息，人们也可以大力出奇迹，一个一个试，但这要很久的时间才能做到。不过，数字呢？</p><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>Android上有种解锁密码的方式，这里说数字方式。</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>首先搜索android源代码，可以得到<a href="https://source.android.google.cn/?hl=zh-cn">https://source.android.google.cn/?hl=zh-cn</a>。进入页面，选择前往代码页面，就可以进入<a href="https://cs.android.com/android/platform/superproject/?hl=zh-cn">https://cs.android.com/android/platform/superproject/?hl=zh-cn</a>(需要🪜)。搜索在“search for code or files”输入password，进入platform&#x2F;superproject&#x2F;master&#x2F;packages&#x2F;apps&#x2F;Settings&#x2F;src&#x2F;com&#x2F;android&#x2F;settings&#x2F;password&#x2F;，打开ConfirmLockPassword.java，查找onClick()，看到了一个似乎有用的handleNext()。在这个方法里，定义了一个又由getText()得到的passwordText，它应该就是锁屏界面下，我们输入的密码了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2023/07/19/1.html"/>
      <url>/2023/07/19/1.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h2><p>在<code>&lt;body&gt;</code>内引入vue的文件，之后用Vue.createApp()创建应用，再用mount()挂载应用到某一个元素上。比如”#app”，就是挂载到id为app的元素上。  </p><h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h2><p>在创建应用时可以传递参数</p><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> vueapp <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                msg<span class="token punctuation">:</span> <span class="token string">"Hello Vue"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//设置值</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>vueapp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建应用并绑定到指定元素上</span></code></pre><p>比如上面的<code>msg:&quot;Hello Vue&quot;</code><br>在<code>&lt;div id=&quot;app&quot;&gt;&lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;&lt;/div&gt;</code>中，vue会将“Hello Vue”绑定到<code>&#123;&#123; msg &#125;&#125;</code>上。<br>除了在创建应用时传递参数设置数据，也可以用代码设置。</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>msg<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出已有的值: => Hello Vue</span>app<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"Hello Vue.js!"</span> <span class="token comment" spellcheck="true">// 改变已有的值 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>msg<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出改变后的已有的值=> Hello Vue.js!</span>app<span class="token punctuation">.</span>anothermsg <span class="token operator">=</span> <span class="token string">"javascript"</span> <span class="token comment" spellcheck="true">// 设置新的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>anothermsg<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出新的值</span></code></pre><p>此处仅使用了字符串作为例子，其他类型也可以使用</p><h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><p>这个就是方法了。</p><pre><code>methods: &#123;            logmsg() &#123;                console.log(this.msg)            &#125;,        &#125;,</code></pre><p>这里规定了一个叫<code>addnumber()</code>的方法，如果调用它，会在控制台打印<code>msg</code>，<code>this</code>就是指<code>app</code>，即是应用。</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>开头为<code>v-</code>的<strong>特殊元素属性</strong>，它会执行一些操作。</p><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>将一个值绑定到元素上。例如：</p><pre><code>&lt;img v-bind:src=&quot;example.com/xxx.jpg&quot;&gt;</code></pre><p>渲染后的元素，就会是</p><pre><code>&lt;img src=&quot;example.com/xxx.jpg&quot;&gt;</code></pre><p>也可以将<code>v-bind</code>去掉，改成<code>&lt;img :src=&quot;example.com/xxx.jpg&quot;&gt;</code>，结果不会改变。也可以用对象进行绑定<br><code>&lt;img v-bind=&quot;&#123; src:&quot;example&quot;, &#39;class&#39;: &#39;isClass&#39;&#125;&quot;&gt;</code>。在这里，绑定class时，class的绑定与否取决于‘isClass’的真假值。</p><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>基于表达式值的真假性，来条件性地渲染元素或者模板片段。</p><pre><code>&lt;h1 v-if=&quot;isShow&quot;&gt;some text&lt;/h1&gt;// 如果isShow为真</code></pre><h3 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h3><p>和v-if作用相同，但<code>v-if</code>只能有一个，<code>v-else-if</code>可以有多个。<code>v-else-if</code>前必须跟着<code>v-if</code>。</p><pre><code>&lt;h1 v-if=&quot;isShow&quot;&gt;some text&lt;/h1&gt;// 如果isShow为真&lt;h1 v-else-if=&quot;isShow2&quot;&gt;some text&lt;/h1&gt;// 如果isShow2为真且v-if没有执行&lt;h1 v-else-if=&quot;isShow3&quot;&gt;some text&lt;/h1&gt;// 如果isShow3为真且上面的v-if和v-else-if没有执行</code></pre><h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><p>前面必须有<code>v-if</code>。如果<code>v-if``v-else-if</code>都判断失败了，就会执行<code>v-else</code>。</p><pre><code>&lt;h1 v-if=&quot;isShow&quot;&gt;some text&lt;/h1&gt;// 如果isShow为真&lt;h1 v-else-if=&quot;isShow2&quot;&gt;some text&lt;/h1&gt;// 如果isShow2为真且v-if没有执行&lt;h1 v-else-if=&quot;isShow3&quot;&gt;some text&lt;/h1&gt;// 如果isShow3为真且上面的v-if和v-else-if没有执行&lt;h1 v-else&gt;something&lt;/h1&gt;// 如果上面的判断都没有执行</code></pre><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>基于数据多次渲染元素。</p><pre><code>//items: [//&#123; id: 1, text: &quot;item1&quot; &#125;,//&#123; id: 2, text: &quot;item2&quot; &#125;,//&#123; id: 3, text: &quot;item3&quot; &#125;//],&lt;div v-for=&quot;item in items&quot;&gt;// in也可以用of替换    &#123;&#123; item.text &#125;&#125;&lt;/div&gt;</code></pre><p>在基于对象作为数据时，还可以使用<code>(value, key) in anobject</code>或<code>(value, key, index) in anobject</code>。value就是对象内的值，如</p><pre><code>&#123;&quot;iamatext&quot;: &quot;hi&quot;&#125;</code></pre><p>中，value就是“hi”，key就是“iamatext”，index就是0。<br>一个元素上不建议同时使用<code>v-if</code>和<code>v-for</code>，两者之间的层级不明显。在Vue中，一个元素上如果同时出现了它们两个，<code>v-if</code>有比<code>v-for</code>更高的优先级。可以把<code>v-if</code>和<code>v-for</code>放在两个元素上来解决问题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/19/16107.html"/>
      <url>/2023/07/19/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
